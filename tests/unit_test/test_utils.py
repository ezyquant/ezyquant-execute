import pytest

from ezyquant_execution import utils


@pytest.mark.parametrize(
    "value, is_round_up, expected_output",
    [
        (0, True, 0),
        (1, True, 100),
        (99, True, 100),
        (100, True, 100),
        (101, True, 200),
        (0, False, 0),
        (1, False, 0),
        (99, False, 0),
        (100, False, 100),
        (101, False, 100),
    ],
)
def test_round_100(value, is_round_up, expected_output):
    assert utils.round_100(value, is_round_up) == expected_output


@pytest.mark.parametrize(
    "value, is_round_up, expected_output",
    [
        (0, True, 0),
        (1, True, 2),
        (2, True, 2),
        (0, False, 0),
        (1, False, 0),
        (2, False, 2),
    ],
)
def test_round_even(value, is_round_up, expected_output):
    assert utils.round_even(value, is_round_up) == expected_output


@pytest.mark.parametrize(
    "price, n_tick, is_round_up, expected_output",
    [
        (0.01, 0, True, 0.01),
        (0.01, -1, True, 0.01),
        (0.01, -2, True, 0.01),
        (0.01, 1, True, 0.02),
        (0.01, 2, True, 0.03),
        (0.02, 0, True, 0.02),
        (0.02, -1, True, 0.01),
        (0.02, -2, True, 0.01),
        (0.02, 1, True, 0.03),
        (0.02, 2, True, 0.04),
        (1.99, 0, True, 1.99),
        (1.99, -1, True, 1.98),
        (1.99, -2, True, 1.97),
        (1.99, 1, True, 2.00),
        (1.99, 2, True, 2.02),
        (2.00, 0, True, 2.00),
        (2.00, -1, True, 1.99),
        (2.00, -2, True, 1.98),
        (2.00, 1, True, 2.02),
        (2.00, 2, True, 2.04),
        (2.02, 0, True, 2.02),
        (2.02, -1, True, 2.00),
        (2.02, -2, True, 1.99),
        (2.02, 1, True, 2.04),
        (2.02, 2, True, 2.06),
        (399, 0, True, 399),
        (399, -1, True, 398),
        (399, -2, True, 397),
        (399, 1, True, 400),
        (399, 2, True, 402),
        (400, 0, True, 400),
        (400, -1, True, 399),
        (400, -2, True, 398),
        (400, 1, True, 402),
        (400, 2, True, 404),
        (402, 0, True, 402),
        (402, -1, True, 400),
        (402, -2, True, 399),
        (402, 1, True, 404),
        (402, 2, True, 406),
        (498, 0, True, 498),
        (498, -1, True, 496),
        (498, -2, True, 494),
        (498, 1, True, 500),
        (498, 2, True, 502),
        (500, 0, True, 500),
        (500, -1, True, 498),
        (500, -2, True, 496),
        (500, 1, True, 502),
        (500, 2, True, 504),
        (502, 0, True, 502),
        (502, -1, True, 500),
        (502, -2, True, 498),
        (502, 1, True, 504),
        (502, 2, True, 506),
        (300.1, 0, True, 301),
        (300.1, -1, True, 300),
        (300.1, -2, True, 299),
        (300.1, 1, True, 302),
        (300.1, 2, True, 303),
        (500.1, 0, True, 502),
        (500.1, -1, True, 500),
        (500.1, -2, True, 498),
        (500.1, 1, True, 504),
        (500.1, 2, True, 506),
        (0.01, 0, False, 0.01),
        (0.01, -1, False, 0.01),
        (0.01, -2, False, 0.01),
        (0.01, 1, False, 0.02),
        (0.01, 2, False, 0.03),
        (0.02, 0, False, 0.02),
        (0.02, -1, False, 0.01),
        (0.02, -2, False, 0.01),
        (0.02, 1, False, 0.03),
        (0.02, 2, False, 0.04),
        (1.99, 0, False, 1.99),
        (1.99, -1, False, 1.98),
        (1.99, -2, False, 1.97),
        (1.99, 1, False, 2.00),
        (1.99, 2, False, 2.02),
        (2.00, 0, False, 2.00),
        (2.00, -1, False, 1.99),
        (2.00, -2, False, 1.98),
        (2.00, 1, False, 2.02),
        (2.00, 2, False, 2.04),
        (2.02, 0, False, 2.02),
        (2.02, -1, False, 2.00),
        (2.02, -2, False, 1.99),
        (2.02, 1, False, 2.04),
        (2.02, 2, False, 2.06),
        (399, 0, False, 399),
        (399, -1, False, 398),
        (399, -2, False, 397),
        (399, 1, False, 400),
        (399, 2, False, 402),
        (400, 0, False, 400),
        (400, -1, False, 399),
        (400, -2, False, 398),
        (400, 1, False, 402),
        (400, 2, False, 404),
        (402, 0, False, 402),
        (402, -1, False, 400),
        (402, -2, False, 399),
        (402, 1, False, 404),
        (402, 2, False, 406),
        (498, 0, False, 498),
        (498, -1, False, 496),
        (498, -2, False, 494),
        (498, 1, False, 500),
        (498, 2, False, 502),
        (500, 0, False, 500),
        (500, -1, False, 498),
        (500, -2, False, 496),
        (500, 1, False, 502),
        (500, 2, False, 504),
        (502, 0, False, 502),
        (502, -1, False, 500),
        (502, -2, False, 498),
        (502, 1, False, 504),
        (502, 2, False, 506),
        (300.1, 0, False, 300),
        (300.1, -1, False, 299),
        (300.1, -2, False, 298),
        (300.1, 1, False, 301),
        (300.1, 2, False, 302),
        (500.1, 0, False, 500),
        (500.1, -1, False, 498),
        (500.1, -2, False, 496),
        (500.1, 1, False, 502),
        (500.1, 2, False, 504),
    ],
)
def test_match_tick_price(price, n_tick, is_round_up, expected_output):
    assert utils.match_tick_price(price, n_tick, is_round_up) == expected_output
